/* eslint-disable */
/**
 * Generated `api` utility.
 *
 * THIS CODE IS AUTOMATICALLY GENERATED.
 *
 * Generated by convex@1.13.3-alpha.0.
 * To regenerate, run `npx convex dev`.
 * @module
 */

import type * as index from "../index.js";

import type {
  ApiFromModules,
  FilterApi,
  FunctionReference,
} from "convex/server";
/**
 * A utility for referencing Convex functions in your app's API.
 *
 * Usage:
 * ```js
 * const myFunctionReference = api.myModule.myFunction;
 * ```
 */
declare const fullApi: ApiFromModules<{
  index: typeof index;
}>;
declare const fullApiWithMounts: typeof fullApi & {
  foods: {
    hybrid: {
      hybridSearch: FunctionReference<
        "action",
        "public",
        { filterField?: string; query: string; semanticRatio?: number },
        any
      >;
    };
    text_search: {
      fullTextSearch: FunctionReference<
        "query",
        "public",
        { filterField?: string; limit?: number; query: string },
        any
      >;
    };
    vector_search: {
      fetchResults: FunctionReference<
        "query",
        "public",
        { results: Array<{ _id: string; _score: number }> },
        any
      >;
      insert: FunctionReference<
        "action",
        "public",
        { filterField: string; textField: string },
        any
      >;
      insertRow: FunctionReference<
        "mutation",
        "public",
        { embedding: Array<number>; filterField: string; textField: string },
        any
      >;
      list: FunctionReference<"query", "public", any, any>;
      populate: FunctionReference<"action", "public", {}, any>;
      vectorSearch: FunctionReference<
        "action",
        "public",
        { filterField?: Array<string>; limit?: number; query: string },
        any
      >;
    };
  };
  movies: {
    hybrid: {
      hybridSearch: FunctionReference<
        "action",
        "public",
        { filterField?: string; query: string; semanticRatio?: number },
        any
      >;
    };
    text_search: {
      fullTextSearch: FunctionReference<
        "query",
        "public",
        { filterField?: string; limit?: number; query: string },
        any
      >;
    };
    vector_search: {
      fetchResults: FunctionReference<
        "query",
        "public",
        { results: Array<{ _id: string; _score: number }> },
        any
      >;
      insert: FunctionReference<
        "action",
        "public",
        { filterField: string; textField: string },
        any
      >;
      insertRow: FunctionReference<
        "mutation",
        "public",
        { embedding: Array<number>; filterField: string; textField: string },
        any
      >;
      list: FunctionReference<"query", "public", any, any>;
      populate: FunctionReference<"action", "public", {}, any>;
      vectorSearch: FunctionReference<
        "action",
        "public",
        { filterField?: Array<string>; limit?: number; query: string },
        any
      >;
    };
  };
};

export declare const api: FilterApi<
  typeof fullApiWithMounts,
  FunctionReference<any, "public">
>;
export declare const internal: FilterApi<
  typeof fullApiWithMounts,
  FunctionReference<any, "internal">
>;
